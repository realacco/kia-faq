import { fireEvent, render, screen } from '@testing-library/react';
import React from 'react';

import Input from './Input';

// ÏïÑÏù¥ÏΩò mocking, Ïã§Ï†ú svg ÏïÑÏù¥ÏΩò importÍ∞Ä ÏïàÎê®..
jest.mock('@/shared/assets/icons', () => ({
  CloseIcon: () => <span data-testid="close-icon">√ó</span>,
  SearchIcon: () => <span data-testid="search-icon">üîç</span>,
}));

describe('Input Component', () => {
  it('Í∏∞Î≥∏ input Î†åÎçîÎßÅ', () => {
    render(<Input placeholder="Í≤ÄÏÉâÏñ¥ ÏûÖÎ†•" />);
    expect(screen.getByPlaceholderText('Í≤ÄÏÉâÏñ¥ ÏûÖÎ†•')).toBeInTheDocument();
    expect(screen.getByTestId('search-icon')).toBeInTheDocument();
  });

  it('ÏûÖÎ†•Í∞íÏù¥ ÏûàÏùÑ Îïå close ÏïÑÏù¥ÏΩò ÌëúÏãú', () => {
    render(<Input value="test" />);
    expect(screen.getByTestId('close-icon')).toBeInTheDocument();
  });

  it('onSearch Ìò∏Ï∂ú ÌÖåÏä§Ìä∏', () => {
    const mockSearch = jest.fn();
    render(<Input value="test" onSearch={mockSearch} />);

    fireEvent.click(screen.getByTestId('search-icon'));
    expect(mockSearch).toHaveBeenCalledWith('test');
  });

  it('onClear Ìò∏Ï∂ú ÌÖåÏä§Ìä∏', () => {
    const mockClear = jest.fn();
    render(<Input value="test" onClear={mockClear} />);

    fireEvent.click(screen.getByTestId('close-icon'));
    expect(mockClear).toHaveBeenCalled();
  });

  it('ÏóîÌÑ∞ ÌÇ§Î°ú Í≤ÄÏÉâ Ïã§Ìñâ', () => {
    const mockSearch = jest.fn();
    render(<Input onSearch={mockSearch} />);

    const input = screen.getByRole('textbox');
    fireEvent.change(input, { target: { value: 'test' } });
    fireEvent.keyDown(input, { key: 'Enter' });

    expect(mockSearch).toHaveBeenCalledWith('test');
  });

  it('Î≤ÑÌäº ÌëúÏãú ÏòµÏÖò ÌÖåÏä§Ìä∏', () => {
    render(<Input value="test" showSearchButton={false} showClearButton={false} />);

    expect(screen.queryByTestId('search-icon')).not.toBeInTheDocument();
    expect(screen.queryByTestId('close-icon')).not.toBeInTheDocument();
  });
});
